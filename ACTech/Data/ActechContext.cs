// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using ACTech.Models;
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ACTech.Models;

namespace ACTech.Data
{
    public partial class ActechContext : DbContext
    {
        public ActechContext()
        {
        }

        public ActechContext(DbContextOptions<ActechContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<Education> Educations { get; set; }
        public virtual DbSet<Employment> Employments { get; set; }
        public virtual DbSet<Grade> Grades { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<StudentAddress> StudentAddresses { get; set; }
        public virtual DbSet<StudentCompany> StudentCompanies { get; set; }
        public virtual DbSet<StudentContact> StudentContacts { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-H6V3G6L;Initial Catalog=ACTech;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Grade>(entity =>
            {
                entity.Property(e => e.A1).IsFixedLength();

                entity.Property(e => e.A10).IsFixedLength();

                entity.Property(e => e.A2).IsFixedLength();

                entity.Property(e => e.A3).IsFixedLength();

                entity.Property(e => e.A4).IsFixedLength();

                entity.Property(e => e.A5).IsFixedLength();

                entity.Property(e => e.A6).IsFixedLength();

                entity.Property(e => e.A7).IsFixedLength();

                entity.Property(e => e.A8).IsFixedLength();

                entity.Property(e => e.A9).IsFixedLength();

                entity.Property(e => e.Cert).IsFixedLength();

                entity.Property(e => e.CertNumber).IsFixedLength();

                entity.Property(e => e.Loc).IsFixedLength();

                entity.Property(e => e.Memo).IsFixedLength();

                entity.Property(e => e.Ref).IsFixedLength();

                entity.Property(e => e.Section).IsFixedLength();

                entity.Property(e => e.StudentId).IsFixedLength();

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.Grades)
                    .HasForeignKey(d => d.CourseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Grade_Course");

                entity.HasOne(d => d.Student)
                    .WithMany(p => p.Grades)
                    .HasForeignKey(d => d.StudentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ForeignKeyConstraint1");
            });

            modelBuilder.Entity<Student>(entity =>
            {
                entity.Property(e => e.StudentId).IsFixedLength();

                entity.Property(e => e.CheDateGraduated).IsFixedLength();

                entity.Property(e => e.CheStudentId).IsFixedLength();

                entity.Property(e => e.CheStudentSs).IsFixedLength();
            });

            modelBuilder.Entity<StudentAddress>(entity =>
            {
                entity.Property(e => e.Address).IsFixedLength();

                entity.Property(e => e.Address2).IsFixedLength();

                entity.Property(e => e.City).IsFixedLength();

                entity.Property(e => e.State).IsFixedLength();

                entity.Property(e => e.StudentId).IsFixedLength();

                entity.Property(e => e.Zip).IsFixedLength();

                entity.HasOne(d => d.Student)
                    .WithMany(p => p.StudentAddresses)
                    .HasForeignKey(d => d.StudentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Student Address_Student");
            });

            modelBuilder.Entity<StudentCompany>(entity =>
            {
                entity.Property(e => e.StudentId).IsFixedLength();

                entity.HasOne(d => d.Student)
                    .WithMany(p => p.StudentCompanies)
                    .HasForeignKey(d => d.StudentId)
                    .HasConstraintName("FK_Student Company_Student");
            });

            modelBuilder.Entity<StudentContact>(entity =>
            {
                entity.Property(e => e.StudentId).IsFixedLength();

                entity.HasOne(d => d.Student)
                    .WithMany(p => p.StudentContacts)
                    .HasForeignKey(d => d.StudentId)
                    .HasConstraintName("FK_Student Contact_Student");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}